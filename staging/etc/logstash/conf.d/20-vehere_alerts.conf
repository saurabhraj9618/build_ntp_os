input {
   file {
      path => "${MLNETFLOW_OUT_PATH}/*.json"
      # codec => json
      close_older => 600
      max_open_files => 8192
      sincedb_path => "/var/cache/logstash/sincedbs/mlnet.db"
      type => "VALERT"
   }
   file {
      path => "${MLDNS_OUT_PATH}/*.json"
      # codec => json
      close_older => 600
      max_open_files => 8192
      sincedb_path => "/var/cache/logstash/sincedbs/mldns.db"
      type => "VDNSALERT"
   }
    file {
      path => "/var/log/vehere/ml-noalert/*.json"
      # codec => json
      close_older => 600
      max_open_files => 8192
      sincedb_path => "/var/cache/logstash/sincedbs/mlnonet.db"
      type => "VNOALERT"
   }
   file {
      path => "/var/log/vehere/ml-dns-no-alert/*.json"
      # codec => json
      close_older => 600
      max_open_files => 8192
      sincedb_path => "/var/cache/logstash/sincedbs/mlnodns.db"
      type => "VDNSNOALERT"
   }
   file { 
     path => "/var/log/ruleengine/*.json"
    #  codec => json
     sincedb_path => "/var/cache/logstash/sincedbs/valert.db"
     type => "VRULEALERT"
   }
}

filter {
  mutate { add_field => { "[@metadata][alerts_type]" => "%{type}" } }
if ([@metadata][alerts_type] == "VRULEALERT" or [@metadata][alerts_type] == "VALERT" or [@metadata][alerts_type] == "VDNSALERT" or [@metadata][alerts_type] == "VNOALERT" or [@metadata][alerts_type] == "VDNSNOALERT" ) {
  json {
    source => "message"
    target => "[session][analytics]"
  }
  mutate { remove_field => ["message", "type", "[session][analytics][type]", "[session][analytics][alert_transport]"]}
       
  if([session][analytics][match_body][session][id]) {
    mutate { add_field => { "[session][id]" => "%{[session][analytics][match_body][session][id]}" } }
  }
  if([session][analytics][match_body][network][src_ip]) {
    mutate { add_field => { "[network][src_ip]" => "%{[session][analytics][match_body][network][src_ip]}" } }
  }
  if([session][analytics][match_body][transport][src_port]) {
    mutate { add_field => { "[transport][src_port]" => "%{[session][analytics][match_body][transport][src_port]}" } }
  }
  if([session][analytics][match_body][network][dst_ip]) {
    mutate { add_field => { "[network][dst_ip]" => "%{[session][analytics][match_body][network][dst_ip]}" } }
  }
  if([session][analytics][match_body][transport][dst_port]) {
    mutate { add_field => { "[transport][dst_port]" => "%{[session][analytics][match_body][transport][dst_port]}" } }
  }
  if([session][analytics][match_body][session][dpi_num_app_protocol]) {
    mutate { add_field => { "[session][dpi_num_app_protocol]" => "%{[session][analytics][match_body][session][dpi_num_app_protocol]}" } }
  }
  if([session][analytics][match_body][session][dpi_num_master_protocol]) {
    mutate { add_field => { "[session][dpi_num_master_protocol]" => "%{[session][analytics][match_body][session][dpi_num_master_protocol]}" } }
  }
  if([session][analytics][match_body][session][dpi_protocol]) {
    mutate { add_field => { "[session][dpi_protocol]" => "%{[session][analytics][match_body][session][dpi_protocol]}" } }
  }
  if([session][analytics][match_body][session][protocol]) {
    mutate { add_field => { "[session][protocol]" => "%{[session][analytics][match_body][session][protocol]}" } }
  }
  if([session][analytics][match_body][payload][dns_domain_names]) {
    mutate { add_field => { "[payload][dns_domain_names]" => "%{[session][analytics][match_body][payload][dns_domain_names]}" } }
  }
  if([session][analytics][rule_name]) {
    mutate { add_field => { "[session][analytics][name]" => "%{[session][analytics][rule_name]}" } }
    mutate { remove_field => [ "[session][analytics][rule_name]" ] }
  }
  if([session][analytics][match_body][payload][dns_headers]) {
    mutate { add_field => { "[payload][dns_headers]" => "%{[session][analytics][match_body][payload][dns_headers]}" } }
  }
  if([session][analytics][rule_text]) {
    mutate { add_field => { "[session][analytics][description]" => "%{[session][analytics][rule_text]}" } }
    mutate { remove_field => [ "[session][analytics][rule_text]" ] }
  }
  mutate { remove_field => [ "[session][analytics][match_body]", "path", "host"]}     
  if ("_jsonparsefailure" in [tags]) {
    drop { }
  }
}
}

output {
   if ([@metadata][alerts_type] == "VRULEALERT" or [@metadata][alerts_type] == "VALERT" or [@metadata][alerts_type] == "VDNSALERT" or [@metadata][alerts_type] == "VNOALERT" or [@metadata][alerts_type] == "VDNSNOALERT" ) {
    stdout { codec => json }
    elasticsearch {
      hosts => ["localhost:9200"]
      index => "logvehere-alerts-%{+YYYY.MM.dd}"
      document_type => "%{[@metadata][alerts_type]}"
      template => "/etc/logstash/templates/ls-valerts.json"
      template_name => "valerts"
    }
    syslog {
      host => "${ALERT_SYSLOG_HOST_TO}"
#      codec => "json"
      port => "${ALERT_SYSLOG_PORT}"
      protocol => "${ALERT_SYSLOG_PROTOCOL}"
#      ssl_verify => "false"
#      rfc => "rfc5424"
#      key => "TOKEN"
#      pen => 41058
    }
  }
}
