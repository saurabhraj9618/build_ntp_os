input {
   file {
      path => "${DPI_DATA_PATH}/*.json"
      codec => json
      close_older => 600
      max_open_files => 8192
      sincedb_path => "/var/cache/logstash/sincedbs/dpi.db"
#      sincedb_path => "/dev/null"
      type => "VFLOWS"
#      start_position => "beginning"
#      ignore_older => 0
   }
   file {
      path => "${STAT_DATA_PATH}/*.json"
      codec => json
      close_older => 600
      max_open_files => 8192
      sincedb_path => "/var/cache/logstash/sincedbs/stats.db"
#      sincedb_path => "/dev/null"
      type => "VSTATS"
#      start_position => "beginning"
#      ignore_older => 0
   }
}

filter {
   if ([type] == "VFLOWS") {
      ### Simple maths to create a sum-total fileds for packets, octets and, bytes
      math {
         calculate => [
            [ "add", "[flows][dataByteCount]", "[flows][reverseDataByteCount]", "[flows][cumulativeByteCount]" ],
            [ "add", "[flows][octetTotalCount]", "[flows][reverseOctetTotalCount]", "[flows][cumulativeOctetCount]" ],
            [ "add", "[flows][packetTotalCount]", "[flows][reversePacketTotalCount]", "[flows][cumulativePacketCount]" ]
         ]
      }
   #   ruby {
   #      code => "
   #         event.set("[flows][cumulativeByteCount]", { event.get("[flows][dataByteCount]") + event.get("[flows][reverseDataByteCount]") });
   #         event.set("[flows][cumulativeOctetCount]", { event.get("[flows][octetTotalCount]") + event.get("[flows][reverseOctetTotalCount]") });
   #         event.set("[flows][cumulativePacketCount]", { event.get("[flows][packetTotalCount]") + event.get("[flows][reversePacketTotalCount]") });
   #      "
   #   }

      ### Begins GeoIP handler
      if ([flows][sourceIPv4Address]) {
         cidr {
            address => [ "%{[flows][sourceIPv4Address]}" ]
            network => [ "169.254.0.0/16", "fe80::/64", "192.168.0.0/16" ]
            add_tag => [ "localsrcip" ]
         }
         if ("localsrcip" in [tags]) {
            mutate {
               add_field => {
                  "[@metadata][sourceIPv4Address]" => "${PVT_IP_ADDR}"
               }
            }
         } else {
              mutate {
                 add_field => {
                    "[@metadata][sourceIPv4Address]" => "%{[flows][sourceIPv4Address]}"
                 }
              }
         }
         geoip {
            database => "/usr/local/etc/geoip/GeoLite2-City.mmdb"
            source => "[@metadata][sourceIPv4Address]"
            target => "[flows][srcGeoIP]"
            remove_tag => [ "localsrcip" ]
         }
         geoip {
            database => "/usr/local/etc/geoip/GeoLite2-ASN.mmdb"
            source => "[@metadata][sourceIPv4Address]"
            target => "[flows][srcGeoIP]"
         }
      }
      if ([flows][destinationIPv4Address]) {
         cidr {
            address => [ "%{[flows][destinationIPv4Address]}" ]
            network => [ "169.254.0.0/16", "fe80::/64", "192.168.0.0/16" ]
            add_tag => [ "localdstip" ]
         }
         if ("localdstip" in [tags]) {
            mutate {
               add_field => {
                  "[@metadata][destinationIPv4Address]" => "${PVT_IP_ADDR}"
               }
            }
         } else {
              mutate {
                 add_field => {
                    "[@metadata][destinationIPv4Address]" => "%{[flows][destinationIPv4Address]}"
                 }
              }
         }
         geoip {
            database => "/usr/local/etc/geoip/GeoLite2-City.mmdb"
            source => "[@metadata][destinationIPv4Address]"
            target => "[flows][dstGeoIP]"
            remove_tag => [ "localdstip" ] 
         }
         geoip {
            database => "/usr/local/etc/geoip/GeoLite2-ASN.mmdb"
            source => "[@metadata][destinationIPv4Address]"
            target => "[flows][dstGeoIP]"
         }
      }
   ### End GeoIP Handler

   ### Begin DPI Protocol Translation Block
   ### protocolIdentifier & numAppLabel used here
      translate {
         id => "convert_ip_protocol"
         dictionary_path => "/usr/local/etc/dictionaries/iana_protocol_numbers.yml"
         field => "[flows][protocolIdentifier]"
         destination => "[flows][protocolId]"
         fallback => "unknown"
      }
      if ([flows][protocolIdentifier] == 6) {
          translate {
             id => "convert_tcp_application_silk"
             dictionary_path => "/usr/local/etc/dictionaries/iana_service_names_tcp.yml"
             field => "[flows][numAppLabel]"
             destination => "[@metadata][proto0]"
             fallback => "unknown"
          }
          translate {
             id => "convert_tcp_application_port"
             dictionary_path => "/usr/local/etc/dictionaries/iana_service_names_tcp.yml"
             field => "[flows][destinationTransportPort]"
             destination => "[@metadata][proto1]"
             fallback => "unknown"
          }
      } else if ([flows][protocolIdentifier] == 17) {
         translate {
            id => "convert_udp_application_silk"
            dictionary_path => "/usr/local/etc/dictionaries/iana_service_names_udp.yml"
            field => "[flows][numAppLabel]"
            destination => "[@metadata][proto0]"
            fallback => "unknown"
         }  
         translate {
            id => "convert_udp_application_port"
            dictionary_path => "/usr/local/etc/dictionaries/iana_service_names_udp.yml"
            field => "[flows][destinationTransportPort]"
            destination => "[@metadata][proto1]"
            fallback => "unknown"
         }
      } else if ([flows][protocolIdentifier] == 132) {
         translate {
            id => "convert_sctp_application_silk"
            dictionary_path => "/usr/local/etc/dictionaries/iana_service_names_sctp.yml"
            field => "[flows][numAppLabel]"
            destination => "[@metadata][proto0]"
            fallback => "unknown"
         }
         translate {
            id => "convert_sctp_application_port"
            dictionary_path => "/usr/local/etc/dictionaries/iana_service_names_sctp.yml"
            field => "[flows][destinationTransportPort]"
            destination => "[@metadata][proto1]"
            fallback => "unknown"
         }
      } else if ([flows][protocolIdentifier] == 33) {
         translate {
            id => "convert_dccp_application_silk"
            dictionary_path => "/usr/local/etc/dictionaries/iana_service_names_dccp.yml"
            field => "[flows][numAppLabel]"
            destination => "[@metadata][proto0]"
            fallback => "unknown"
         }
         translate {
            id => "convert_dccp_application_port"
            dictionary_path => "/usr/local/etc/dictionaries/iana_service_names_dccp.yml"
            field => "[flows][destinationTransportPort]"
            destination => "[@metadata][proto1]"
            fallback => "unknown"
         }
      } else {
         translate {
            id => "convert_anonymous_protocol"
            dictionary_path => "/usr/local/etc/dictionaries/iana_protocol_numbers.yml"
            field => "[flows][protocolIdentifier]"
            destination => "[@metadata][proto0]"
            fallback => "unknown"
         }
      }
      if ([@metadata][proto0] == [@metadata][proto1]) {
         mutate {
            add_field => {
               "[@metadata][proto]" => "%{[@metadata][proto0]}"
               "[flows][appLabel]" => "%{[@metadata][proto]}"
            }
         }
      } else if ([@metadata][proto0] == "unknown") {
         if ([@metadata][proto1] != "unknown") {
            mutate {
               add_field => {
                  "[@metadata][proto]" => "%{[@metadata][proto1]}"
                  "[flows][appLabel]" => "%{[@metadata][proto]}"
               }
            }
         }
      } else if ([@metadata][proto0] != "unknown") {
         mutate {
            add_field => {
               "[@metadata][proto]" => "%{[@metadata][proto0]}"
               "[flows][appLabel]" => "%{[@metadata][proto]}"
            }
         }
      } else {
         mutate {
            add_field => {
               "[@metadata][proto]" => "unknown"
               "[flows][appLabel]" => "%{[@metadata][proto]}"
            }
         }
      }
      translate {
         dictionary_path => "/usr/local/etc/dictionaries/dpi_proto.yml"
         field => "[flows][nDPIL7Protocol]"
         destination => "[@metadata][dpiProto0]"
         remove_field => "[flows][nDPIL7Protocol]"
      }
      translate {
         dictionary_path => "/usr/local/etc/dictionaries/dpi_proto.yml"
         field => "[flows][nDPIL7SubProtocol]"
         destination => "[@metadata][dpiProto1]"
         remove_field => "[flows][nDPIL7SubProtocol]"
      }
      mutate {
         add_field => {
            "[flows][dpiProto]" => "%{[@metadata][dpiProto0]}.%{[@metadata][dpiProto1]}"
         }
      }
   
      ### End DPI Protocol Translation Handler
      
      ### Begin Useragent Handler
      if ([flows][httpUserAgent]) {
         useragent {
            source => "[flows][httpUserAgent]"
            target => "[flows][webUserAgent]"
            regexes => "/usr/local/etc/dictionaries/regexes.yaml"
         }
      }
      ### End Useragent Handler
   
      ### Begin Date Filter
      date {
         match => [ "[flows][flowEndMilliseconds]", "ISO8601" ]
         timezone => "Etc/UCT"
      }

   }
#   if ([type] == "VSTATS") {
#      
#   }
   if ("_jsonparsefailure" in [tags]) {
      drop { }
   }
}
output {
   ### Begin output handler. Sending flow data to fm-flows-YYYY.MM.dd index and, stats data to fm-stats-YYYY.MM.dd index
   if ([type] == "VFLOWS") {
#   if ([flows]) 
      elasticsearch { 
         hosts => ["localhost:9200"] 
         index => "logvehere-flows-%{+YYYY.MM.dd}"
         template => "/etc/logstash/templates/ls-vflows.json"
         template_name => "vflows"
      }
   }
   else if ([type] == "VSTATS") {
#   else if ([stats]) 
      elasticsearch { 
         hosts => ["localhost:9200"] 
         index => "logvehere-stats-%{+YYYY.MM.dd}"
         template => "/etc/logstash/templates/ls-vstats.json"
         template_name => "vstats"
      }
   }
   else {
      elasticsearch { 
         hosts => ["localhost:9200"] 
         index => "logvehere-other-%{+YYYY.MM.dd}"
         template => "/etc/logstash/templates/ls-vother.json"
         template_name => "vother"
      }
   }
#   stdout { codec => rubydebug }
}
